package ms3.service.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import ms3.service.model.Track;

import ms3.service.service.TrackService;
import ms3.service.service.persistence.AssignmentPersistence;
import ms3.service.service.persistence.CoursePersistence;
import ms3.service.service.persistence.DailyLogPersistence;
import ms3.service.service.persistence.TrackAssignmentPersistence;
import ms3.service.service.persistence.TrackPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the track remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link ms3.service.service.impl.TrackServiceImpl}.
 * </p>
 *
 * @author jackt
 * @see ms3.service.service.impl.TrackServiceImpl
 * @see ms3.service.service.TrackServiceUtil
 * @generated
 */
public abstract class TrackServiceBaseImpl extends BaseServiceImpl
    implements TrackService, IdentifiableBean {
    @BeanReference(type = ms3.service.service.AssignmentLocalService.class)
    protected ms3.service.service.AssignmentLocalService assignmentLocalService;
    @BeanReference(type = ms3.service.service.AssignmentService.class)
    protected ms3.service.service.AssignmentService assignmentService;
    @BeanReference(type = AssignmentPersistence.class)
    protected AssignmentPersistence assignmentPersistence;
    @BeanReference(type = ms3.service.service.CourseLocalService.class)
    protected ms3.service.service.CourseLocalService courseLocalService;
    @BeanReference(type = ms3.service.service.CourseService.class)
    protected ms3.service.service.CourseService courseService;
    @BeanReference(type = CoursePersistence.class)
    protected CoursePersistence coursePersistence;
    @BeanReference(type = ms3.service.service.DailyLogLocalService.class)
    protected ms3.service.service.DailyLogLocalService dailyLogLocalService;
    @BeanReference(type = ms3.service.service.DailyLogService.class)
    protected ms3.service.service.DailyLogService dailyLogService;
    @BeanReference(type = DailyLogPersistence.class)
    protected DailyLogPersistence dailyLogPersistence;
    @BeanReference(type = ms3.service.service.TrackLocalService.class)
    protected ms3.service.service.TrackLocalService trackLocalService;
    @BeanReference(type = ms3.service.service.TrackService.class)
    protected ms3.service.service.TrackService trackService;
    @BeanReference(type = TrackPersistence.class)
    protected TrackPersistence trackPersistence;
    @BeanReference(type = ms3.service.service.TrackAssignmentLocalService.class)
    protected ms3.service.service.TrackAssignmentLocalService trackAssignmentLocalService;
    @BeanReference(type = ms3.service.service.TrackAssignmentService.class)
    protected ms3.service.service.TrackAssignmentService trackAssignmentService;
    @BeanReference(type = TrackAssignmentPersistence.class)
    protected TrackAssignmentPersistence trackAssignmentPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private TrackServiceClpInvoker _clpInvoker = new TrackServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link ms3.service.service.TrackServiceUtil} to access the track remote service.
     */

    /**
     * Returns the assignment local service.
     *
     * @return the assignment local service
     */
    public ms3.service.service.AssignmentLocalService getAssignmentLocalService() {
        return assignmentLocalService;
    }

    /**
     * Sets the assignment local service.
     *
     * @param assignmentLocalService the assignment local service
     */
    public void setAssignmentLocalService(
        ms3.service.service.AssignmentLocalService assignmentLocalService) {
        this.assignmentLocalService = assignmentLocalService;
    }

    /**
     * Returns the assignment remote service.
     *
     * @return the assignment remote service
     */
    public ms3.service.service.AssignmentService getAssignmentService() {
        return assignmentService;
    }

    /**
     * Sets the assignment remote service.
     *
     * @param assignmentService the assignment remote service
     */
    public void setAssignmentService(
        ms3.service.service.AssignmentService assignmentService) {
        this.assignmentService = assignmentService;
    }

    /**
     * Returns the assignment persistence.
     *
     * @return the assignment persistence
     */
    public AssignmentPersistence getAssignmentPersistence() {
        return assignmentPersistence;
    }

    /**
     * Sets the assignment persistence.
     *
     * @param assignmentPersistence the assignment persistence
     */
    public void setAssignmentPersistence(
        AssignmentPersistence assignmentPersistence) {
        this.assignmentPersistence = assignmentPersistence;
    }

    /**
     * Returns the course local service.
     *
     * @return the course local service
     */
    public ms3.service.service.CourseLocalService getCourseLocalService() {
        return courseLocalService;
    }

    /**
     * Sets the course local service.
     *
     * @param courseLocalService the course local service
     */
    public void setCourseLocalService(
        ms3.service.service.CourseLocalService courseLocalService) {
        this.courseLocalService = courseLocalService;
    }

    /**
     * Returns the course remote service.
     *
     * @return the course remote service
     */
    public ms3.service.service.CourseService getCourseService() {
        return courseService;
    }

    /**
     * Sets the course remote service.
     *
     * @param courseService the course remote service
     */
    public void setCourseService(
        ms3.service.service.CourseService courseService) {
        this.courseService = courseService;
    }

    /**
     * Returns the course persistence.
     *
     * @return the course persistence
     */
    public CoursePersistence getCoursePersistence() {
        return coursePersistence;
    }

    /**
     * Sets the course persistence.
     *
     * @param coursePersistence the course persistence
     */
    public void setCoursePersistence(CoursePersistence coursePersistence) {
        this.coursePersistence = coursePersistence;
    }

    /**
     * Returns the daily log local service.
     *
     * @return the daily log local service
     */
    public ms3.service.service.DailyLogLocalService getDailyLogLocalService() {
        return dailyLogLocalService;
    }

    /**
     * Sets the daily log local service.
     *
     * @param dailyLogLocalService the daily log local service
     */
    public void setDailyLogLocalService(
        ms3.service.service.DailyLogLocalService dailyLogLocalService) {
        this.dailyLogLocalService = dailyLogLocalService;
    }

    /**
     * Returns the daily log remote service.
     *
     * @return the daily log remote service
     */
    public ms3.service.service.DailyLogService getDailyLogService() {
        return dailyLogService;
    }

    /**
     * Sets the daily log remote service.
     *
     * @param dailyLogService the daily log remote service
     */
    public void setDailyLogService(
        ms3.service.service.DailyLogService dailyLogService) {
        this.dailyLogService = dailyLogService;
    }

    /**
     * Returns the daily log persistence.
     *
     * @return the daily log persistence
     */
    public DailyLogPersistence getDailyLogPersistence() {
        return dailyLogPersistence;
    }

    /**
     * Sets the daily log persistence.
     *
     * @param dailyLogPersistence the daily log persistence
     */
    public void setDailyLogPersistence(DailyLogPersistence dailyLogPersistence) {
        this.dailyLogPersistence = dailyLogPersistence;
    }

    /**
     * Returns the track local service.
     *
     * @return the track local service
     */
    public ms3.service.service.TrackLocalService getTrackLocalService() {
        return trackLocalService;
    }

    /**
     * Sets the track local service.
     *
     * @param trackLocalService the track local service
     */
    public void setTrackLocalService(
        ms3.service.service.TrackLocalService trackLocalService) {
        this.trackLocalService = trackLocalService;
    }

    /**
     * Returns the track remote service.
     *
     * @return the track remote service
     */
    public ms3.service.service.TrackService getTrackService() {
        return trackService;
    }

    /**
     * Sets the track remote service.
     *
     * @param trackService the track remote service
     */
    public void setTrackService(ms3.service.service.TrackService trackService) {
        this.trackService = trackService;
    }

    /**
     * Returns the track persistence.
     *
     * @return the track persistence
     */
    public TrackPersistence getTrackPersistence() {
        return trackPersistence;
    }

    /**
     * Sets the track persistence.
     *
     * @param trackPersistence the track persistence
     */
    public void setTrackPersistence(TrackPersistence trackPersistence) {
        this.trackPersistence = trackPersistence;
    }

    /**
     * Returns the track assignment local service.
     *
     * @return the track assignment local service
     */
    public ms3.service.service.TrackAssignmentLocalService getTrackAssignmentLocalService() {
        return trackAssignmentLocalService;
    }

    /**
     * Sets the track assignment local service.
     *
     * @param trackAssignmentLocalService the track assignment local service
     */
    public void setTrackAssignmentLocalService(
        ms3.service.service.TrackAssignmentLocalService trackAssignmentLocalService) {
        this.trackAssignmentLocalService = trackAssignmentLocalService;
    }

    /**
     * Returns the track assignment remote service.
     *
     * @return the track assignment remote service
     */
    public ms3.service.service.TrackAssignmentService getTrackAssignmentService() {
        return trackAssignmentService;
    }

    /**
     * Sets the track assignment remote service.
     *
     * @param trackAssignmentService the track assignment remote service
     */
    public void setTrackAssignmentService(
        ms3.service.service.TrackAssignmentService trackAssignmentService) {
        this.trackAssignmentService = trackAssignmentService;
    }

    /**
     * Returns the track assignment persistence.
     *
     * @return the track assignment persistence
     */
    public TrackAssignmentPersistence getTrackAssignmentPersistence() {
        return trackAssignmentPersistence;
    }

    /**
     * Sets the track assignment persistence.
     *
     * @param trackAssignmentPersistence the track assignment persistence
     */
    public void setTrackAssignmentPersistence(
        TrackAssignmentPersistence trackAssignmentPersistence) {
        this.trackAssignmentPersistence = trackAssignmentPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();
    }

    public void destroy() {
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Track.class;
    }

    protected String getModelClassName() {
        return Track.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = trackPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
