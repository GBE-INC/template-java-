package ms3.service.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import ms3.service.model.Track;

import ms3.service.service.TrackLocalService;
import ms3.service.service.persistence.AssignmentPersistence;
import ms3.service.service.persistence.CoursePersistence;
import ms3.service.service.persistence.DailyLogPersistence;
import ms3.service.service.persistence.TrackAssignmentPersistence;
import ms3.service.service.persistence.TrackPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the track local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link ms3.service.service.impl.TrackLocalServiceImpl}.
 * </p>
 *
 * @author jackt
 * @see ms3.service.service.impl.TrackLocalServiceImpl
 * @see ms3.service.service.TrackLocalServiceUtil
 * @generated
 */
public abstract class TrackLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements TrackLocalService, IdentifiableBean {
    @BeanReference(type = ms3.service.service.AssignmentLocalService.class)
    protected ms3.service.service.AssignmentLocalService assignmentLocalService;
    @BeanReference(type = ms3.service.service.AssignmentService.class)
    protected ms3.service.service.AssignmentService assignmentService;
    @BeanReference(type = AssignmentPersistence.class)
    protected AssignmentPersistence assignmentPersistence;
    @BeanReference(type = ms3.service.service.CourseLocalService.class)
    protected ms3.service.service.CourseLocalService courseLocalService;
    @BeanReference(type = ms3.service.service.CourseService.class)
    protected ms3.service.service.CourseService courseService;
    @BeanReference(type = CoursePersistence.class)
    protected CoursePersistence coursePersistence;
    @BeanReference(type = ms3.service.service.DailyLogLocalService.class)
    protected ms3.service.service.DailyLogLocalService dailyLogLocalService;
    @BeanReference(type = ms3.service.service.DailyLogService.class)
    protected ms3.service.service.DailyLogService dailyLogService;
    @BeanReference(type = DailyLogPersistence.class)
    protected DailyLogPersistence dailyLogPersistence;
    @BeanReference(type = ms3.service.service.TrackLocalService.class)
    protected ms3.service.service.TrackLocalService trackLocalService;
    @BeanReference(type = ms3.service.service.TrackService.class)
    protected ms3.service.service.TrackService trackService;
    @BeanReference(type = TrackPersistence.class)
    protected TrackPersistence trackPersistence;
    @BeanReference(type = ms3.service.service.TrackAssignmentLocalService.class)
    protected ms3.service.service.TrackAssignmentLocalService trackAssignmentLocalService;
    @BeanReference(type = ms3.service.service.TrackAssignmentService.class)
    protected ms3.service.service.TrackAssignmentService trackAssignmentService;
    @BeanReference(type = TrackAssignmentPersistence.class)
    protected TrackAssignmentPersistence trackAssignmentPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private TrackLocalServiceClpInvoker _clpInvoker = new TrackLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link ms3.service.service.TrackLocalServiceUtil} to access the track local service.
     */

    /**
     * Adds the track to the database. Also notifies the appropriate model listeners.
     *
     * @param track the track
     * @return the track that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Track addTrack(Track track) throws SystemException {
        track.setNew(true);

        return trackPersistence.update(track);
    }

    /**
     * Creates a new track with the primary key. Does not add the track to the database.
     *
     * @param trackId the primary key for the new track
     * @return the new track
     */
    @Override
    public Track createTrack(long trackId) {
        return trackPersistence.create(trackId);
    }

    /**
     * Deletes the track with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param trackId the primary key of the track
     * @return the track that was removed
     * @throws PortalException if a track with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Track deleteTrack(long trackId)
        throws PortalException, SystemException {
        return trackPersistence.remove(trackId);
    }

    /**
     * Deletes the track from the database. Also notifies the appropriate model listeners.
     *
     * @param track the track
     * @return the track that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Track deleteTrack(Track track) throws SystemException {
        return trackPersistence.remove(track);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Track.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return trackPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ms3.service.model.impl.TrackModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return trackPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ms3.service.model.impl.TrackModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return trackPersistence.findWithDynamicQuery(dynamicQuery, start, end,
            orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return trackPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return trackPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Track fetchTrack(long trackId) throws SystemException {
        return trackPersistence.fetchByPrimaryKey(trackId);
    }

    /**
     * Returns the track with the primary key.
     *
     * @param trackId the primary key of the track
     * @return the track
     * @throws PortalException if a track with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Track getTrack(long trackId) throws PortalException, SystemException {
        return trackPersistence.findByPrimaryKey(trackId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return trackPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the tracks.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ms3.service.model.impl.TrackModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of tracks
     * @param end the upper bound of the range of tracks (not inclusive)
     * @return the range of tracks
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Track> getTracks(int start, int end) throws SystemException {
        return trackPersistence.findAll(start, end);
    }

    /**
     * Returns the number of tracks.
     *
     * @return the number of tracks
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getTracksCount() throws SystemException {
        return trackPersistence.countAll();
    }

    /**
     * Updates the track in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param track the track
     * @return the track that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Track updateTrack(Track track) throws SystemException {
        return trackPersistence.update(track);
    }

    /**
     * Returns the assignment local service.
     *
     * @return the assignment local service
     */
    public ms3.service.service.AssignmentLocalService getAssignmentLocalService() {
        return assignmentLocalService;
    }

    /**
     * Sets the assignment local service.
     *
     * @param assignmentLocalService the assignment local service
     */
    public void setAssignmentLocalService(
        ms3.service.service.AssignmentLocalService assignmentLocalService) {
        this.assignmentLocalService = assignmentLocalService;
    }

    /**
     * Returns the assignment remote service.
     *
     * @return the assignment remote service
     */
    public ms3.service.service.AssignmentService getAssignmentService() {
        return assignmentService;
    }

    /**
     * Sets the assignment remote service.
     *
     * @param assignmentService the assignment remote service
     */
    public void setAssignmentService(
        ms3.service.service.AssignmentService assignmentService) {
        this.assignmentService = assignmentService;
    }

    /**
     * Returns the assignment persistence.
     *
     * @return the assignment persistence
     */
    public AssignmentPersistence getAssignmentPersistence() {
        return assignmentPersistence;
    }

    /**
     * Sets the assignment persistence.
     *
     * @param assignmentPersistence the assignment persistence
     */
    public void setAssignmentPersistence(
        AssignmentPersistence assignmentPersistence) {
        this.assignmentPersistence = assignmentPersistence;
    }

    /**
     * Returns the course local service.
     *
     * @return the course local service
     */
    public ms3.service.service.CourseLocalService getCourseLocalService() {
        return courseLocalService;
    }

    /**
     * Sets the course local service.
     *
     * @param courseLocalService the course local service
     */
    public void setCourseLocalService(
        ms3.service.service.CourseLocalService courseLocalService) {
        this.courseLocalService = courseLocalService;
    }

    /**
     * Returns the course remote service.
     *
     * @return the course remote service
     */
    public ms3.service.service.CourseService getCourseService() {
        return courseService;
    }

    /**
     * Sets the course remote service.
     *
     * @param courseService the course remote service
     */
    public void setCourseService(
        ms3.service.service.CourseService courseService) {
        this.courseService = courseService;
    }

    /**
     * Returns the course persistence.
     *
     * @return the course persistence
     */
    public CoursePersistence getCoursePersistence() {
        return coursePersistence;
    }

    /**
     * Sets the course persistence.
     *
     * @param coursePersistence the course persistence
     */
    public void setCoursePersistence(CoursePersistence coursePersistence) {
        this.coursePersistence = coursePersistence;
    }

    /**
     * Returns the daily log local service.
     *
     * @return the daily log local service
     */
    public ms3.service.service.DailyLogLocalService getDailyLogLocalService() {
        return dailyLogLocalService;
    }

    /**
     * Sets the daily log local service.
     *
     * @param dailyLogLocalService the daily log local service
     */
    public void setDailyLogLocalService(
        ms3.service.service.DailyLogLocalService dailyLogLocalService) {
        this.dailyLogLocalService = dailyLogLocalService;
    }

    /**
     * Returns the daily log remote service.
     *
     * @return the daily log remote service
     */
    public ms3.service.service.DailyLogService getDailyLogService() {
        return dailyLogService;
    }

    /**
     * Sets the daily log remote service.
     *
     * @param dailyLogService the daily log remote service
     */
    public void setDailyLogService(
        ms3.service.service.DailyLogService dailyLogService) {
        this.dailyLogService = dailyLogService;
    }

    /**
     * Returns the daily log persistence.
     *
     * @return the daily log persistence
     */
    public DailyLogPersistence getDailyLogPersistence() {
        return dailyLogPersistence;
    }

    /**
     * Sets the daily log persistence.
     *
     * @param dailyLogPersistence the daily log persistence
     */
    public void setDailyLogPersistence(DailyLogPersistence dailyLogPersistence) {
        this.dailyLogPersistence = dailyLogPersistence;
    }

    /**
     * Returns the track local service.
     *
     * @return the track local service
     */
    public ms3.service.service.TrackLocalService getTrackLocalService() {
        return trackLocalService;
    }

    /**
     * Sets the track local service.
     *
     * @param trackLocalService the track local service
     */
    public void setTrackLocalService(
        ms3.service.service.TrackLocalService trackLocalService) {
        this.trackLocalService = trackLocalService;
    }

    /**
     * Returns the track remote service.
     *
     * @return the track remote service
     */
    public ms3.service.service.TrackService getTrackService() {
        return trackService;
    }

    /**
     * Sets the track remote service.
     *
     * @param trackService the track remote service
     */
    public void setTrackService(ms3.service.service.TrackService trackService) {
        this.trackService = trackService;
    }

    /**
     * Returns the track persistence.
     *
     * @return the track persistence
     */
    public TrackPersistence getTrackPersistence() {
        return trackPersistence;
    }

    /**
     * Sets the track persistence.
     *
     * @param trackPersistence the track persistence
     */
    public void setTrackPersistence(TrackPersistence trackPersistence) {
        this.trackPersistence = trackPersistence;
    }

    /**
     * Returns the track assignment local service.
     *
     * @return the track assignment local service
     */
    public ms3.service.service.TrackAssignmentLocalService getTrackAssignmentLocalService() {
        return trackAssignmentLocalService;
    }

    /**
     * Sets the track assignment local service.
     *
     * @param trackAssignmentLocalService the track assignment local service
     */
    public void setTrackAssignmentLocalService(
        ms3.service.service.TrackAssignmentLocalService trackAssignmentLocalService) {
        this.trackAssignmentLocalService = trackAssignmentLocalService;
    }

    /**
     * Returns the track assignment remote service.
     *
     * @return the track assignment remote service
     */
    public ms3.service.service.TrackAssignmentService getTrackAssignmentService() {
        return trackAssignmentService;
    }

    /**
     * Sets the track assignment remote service.
     *
     * @param trackAssignmentService the track assignment remote service
     */
    public void setTrackAssignmentService(
        ms3.service.service.TrackAssignmentService trackAssignmentService) {
        this.trackAssignmentService = trackAssignmentService;
    }

    /**
     * Returns the track assignment persistence.
     *
     * @return the track assignment persistence
     */
    public TrackAssignmentPersistence getTrackAssignmentPersistence() {
        return trackAssignmentPersistence;
    }

    /**
     * Sets the track assignment persistence.
     *
     * @param trackAssignmentPersistence the track assignment persistence
     */
    public void setTrackAssignmentPersistence(
        TrackAssignmentPersistence trackAssignmentPersistence) {
        this.trackAssignmentPersistence = trackAssignmentPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("ms3.service.model.Track",
            trackLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "ms3.service.model.Track");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Track.class;
    }

    protected String getModelClassName() {
        return Track.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = trackPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
