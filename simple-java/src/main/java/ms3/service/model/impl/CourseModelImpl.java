package ms3.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import ms3.service.model.Course;
import ms3.service.model.CourseModel;
import ms3.service.model.CourseSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Course service. Represents a row in the &quot;train_Course&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ms3.service.model.CourseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseImpl}.
 * </p>
 *
 * @author jackt
 * @see CourseImpl
 * @see ms3.service.model.Course
 * @see ms3.service.model.CourseModel
 * @generated
 */
@JSON(strict = true)
public class CourseModelImpl extends BaseModelImpl<Course>
    implements CourseModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a course model instance should use the {@link ms3.service.model.Course} interface instead.
     */
    public static final String TABLE_NAME = "train_Course";
    public static final Object[][] TABLE_COLUMNS = {
            { "title", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "listPrice", Types.VARCHAR },
            { "provider", Types.VARCHAR },
            { "courseId", Types.BIGINT },
            { "estimatedHours", Types.DOUBLE },
            { "sections", Types.VARCHAR },
            { "skills", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table train_Course (title VARCHAR(75) not null primary key,description VARCHAR(500) null,listPrice VARCHAR(75) null,provider VARCHAR(75) null,courseId LONG,estimatedHours DOUBLE,sections VARCHAR(75) null,skills VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table train_Course";
    public static final String ORDER_BY_JPQL = " ORDER BY course.title ASC";
    public static final String ORDER_BY_SQL = " ORDER BY train_Course.title ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ms3.service.model.Course"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ms3.service.model.Course"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ms3.service.model.Course"),
            true);
    public static long COURSEID_COLUMN_BITMASK = 1L;
    public static long TITLE_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ms3.service.model.Course"));
    private static ClassLoader _classLoader = Course.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Course.class };
    private String _title;
    private String _originalTitle;
    private String _description;
    private String _listPrice;
    private String _provider;
    private long _courseId;
    private long _originalCourseId;
    private boolean _setOriginalCourseId;
    private double _estimatedHours;
    private String _sections;
    private String _skills;
    private long _columnBitmask;
    private Course _escapedModel;

    public CourseModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Course toModel(CourseSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Course model = new CourseImpl();

        model.setTitle(soapModel.getTitle());
        model.setDescription(soapModel.getDescription());
        model.setListPrice(soapModel.getListPrice());
        model.setProvider(soapModel.getProvider());
        model.setCourseId(soapModel.getCourseId());
        model.setEstimatedHours(soapModel.getEstimatedHours());
        model.setSections(soapModel.getSections());
        model.setSkills(soapModel.getSkills());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Course> toModels(CourseSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Course> models = new ArrayList<Course>(soapModels.length);

        for (CourseSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _title;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setTitle(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _title;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return Course.class;
    }

    @Override
    public String getModelClassName() {
        return Course.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("title", getTitle());
        attributes.put("description", getDescription());
        attributes.put("listPrice", getListPrice());
        attributes.put("provider", getProvider());
        attributes.put("courseId", getCourseId());
        attributes.put("estimatedHours", getEstimatedHours());
        attributes.put("sections", getSections());
        attributes.put("skills", getSkills());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String listPrice = (String) attributes.get("listPrice");

        if (listPrice != null) {
            setListPrice(listPrice);
        }

        String provider = (String) attributes.get("provider");

        if (provider != null) {
            setProvider(provider);
        }

        Long courseId = (Long) attributes.get("courseId");

        if (courseId != null) {
            setCourseId(courseId);
        }

        Double estimatedHours = (Double) attributes.get("estimatedHours");

        if (estimatedHours != null) {
            setEstimatedHours(estimatedHours);
        }

        String sections = (String) attributes.get("sections");

        if (sections != null) {
            setSections(sections);
        }

        String skills = (String) attributes.get("skills");

        if (skills != null) {
            setSkills(skills);
        }
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _columnBitmask |= TITLE_COLUMN_BITMASK;

        if (_originalTitle == null) {
            _originalTitle = _title;
        }

        _title = title;
    }

    public String getOriginalTitle() {
        return GetterUtil.getString(_originalTitle);
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getListPrice() {
        if (_listPrice == null) {
            return StringPool.BLANK;
        } else {
            return _listPrice;
        }
    }

    @Override
    public void setListPrice(String listPrice) {
        _listPrice = listPrice;
    }

    @JSON
    @Override
    public String getProvider() {
        if (_provider == null) {
            return StringPool.BLANK;
        } else {
            return _provider;
        }
    }

    @Override
    public void setProvider(String provider) {
        _provider = provider;
    }

    @JSON
    @Override
    public long getCourseId() {
        return _courseId;
    }

    @Override
    public void setCourseId(long courseId) {
        _columnBitmask |= COURSEID_COLUMN_BITMASK;

        if (!_setOriginalCourseId) {
            _setOriginalCourseId = true;

            _originalCourseId = _courseId;
        }

        _courseId = courseId;
    }

    public long getOriginalCourseId() {
        return _originalCourseId;
    }

    @JSON
    @Override
    public double getEstimatedHours() {
        return _estimatedHours;
    }

    @Override
    public void setEstimatedHours(double estimatedHours) {
        _estimatedHours = estimatedHours;
    }

    @JSON
    @Override
    public String getSections() {
        if (_sections == null) {
            return StringPool.BLANK;
        } else {
            return _sections;
        }
    }

    @Override
    public void setSections(String sections) {
        _sections = sections;
    }

    @JSON
    @Override
    public String getSkills() {
        if (_skills == null) {
            return StringPool.BLANK;
        } else {
            return _skills;
        }
    }

    @Override
    public void setSkills(String skills) {
        _skills = skills;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Course toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Course) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CourseImpl courseImpl = new CourseImpl();

        courseImpl.setTitle(getTitle());
        courseImpl.setDescription(getDescription());
        courseImpl.setListPrice(getListPrice());
        courseImpl.setProvider(getProvider());
        courseImpl.setCourseId(getCourseId());
        courseImpl.setEstimatedHours(getEstimatedHours());
        courseImpl.setSections(getSections());
        courseImpl.setSkills(getSkills());

        courseImpl.resetOriginalValues();

        return courseImpl;
    }

    @Override
    public int compareTo(Course course) {
        String primaryKey = course.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Course)) {
            return false;
        }

        Course course = (Course) obj;

        String primaryKey = course.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        CourseModelImpl courseModelImpl = this;

        courseModelImpl._originalTitle = courseModelImpl._title;

        courseModelImpl._originalCourseId = courseModelImpl._courseId;

        courseModelImpl._setOriginalCourseId = false;

        courseModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Course> toCacheModel() {
        CourseCacheModel courseCacheModel = new CourseCacheModel();

        courseCacheModel.title = getTitle();

        String title = courseCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            courseCacheModel.title = null;
        }

        courseCacheModel.description = getDescription();

        String description = courseCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            courseCacheModel.description = null;
        }

        courseCacheModel.listPrice = getListPrice();

        String listPrice = courseCacheModel.listPrice;

        if ((listPrice != null) && (listPrice.length() == 0)) {
            courseCacheModel.listPrice = null;
        }

        courseCacheModel.provider = getProvider();

        String provider = courseCacheModel.provider;

        if ((provider != null) && (provider.length() == 0)) {
            courseCacheModel.provider = null;
        }

        courseCacheModel.courseId = getCourseId();

        courseCacheModel.estimatedHours = getEstimatedHours();

        courseCacheModel.sections = getSections();

        String sections = courseCacheModel.sections;

        if ((sections != null) && (sections.length() == 0)) {
            courseCacheModel.sections = null;
        }

        courseCacheModel.skills = getSkills();

        String skills = courseCacheModel.skills;

        if ((skills != null) && (skills.length() == 0)) {
            courseCacheModel.skills = null;
        }

        return courseCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{title=");
        sb.append(getTitle());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", listPrice=");
        sb.append(getListPrice());
        sb.append(", provider=");
        sb.append(getProvider());
        sb.append(", courseId=");
        sb.append(getCourseId());
        sb.append(", estimatedHours=");
        sb.append(getEstimatedHours());
        sb.append(", sections=");
        sb.append(getSections());
        sb.append(", skills=");
        sb.append(getSkills());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("ms3.service.model.Course");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>listPrice</column-name><column-value><![CDATA[");
        sb.append(getListPrice());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>provider</column-name><column-value><![CDATA[");
        sb.append(getProvider());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>courseId</column-name><column-value><![CDATA[");
        sb.append(getCourseId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>estimatedHours</column-name><column-value><![CDATA[");
        sb.append(getEstimatedHours());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sections</column-name><column-value><![CDATA[");
        sb.append(getSections());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>skills</column-name><column-value><![CDATA[");
        sb.append(getSkills());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
