package ms3.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ms3.service.model.Track;
import ms3.service.model.TrackModel;
import ms3.service.model.TrackSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Track service. Represents a row in the &quot;train_Track&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ms3.service.model.TrackModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TrackImpl}.
 * </p>
 *
 * @author jackt
 * @see TrackImpl
 * @see ms3.service.model.Track
 * @see ms3.service.model.TrackModel
 * @generated
 */
@JSON(strict = true)
public class TrackModelImpl extends BaseModelImpl<Track> implements TrackModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a track model instance should use the {@link ms3.service.model.Track} interface instead.
     */
    public static final String TABLE_NAME = "train_Track";
    public static final Object[][] TABLE_COLUMNS = {
            { "trackId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "courseList", Types.VARCHAR },
            { "accreditation", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table train_Track (trackId LONG not null primary key,title VARCHAR(75) null,description VARCHAR(500) null,courseList VARCHAR(75) null,accreditation VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table train_Track";
    public static final String ORDER_BY_JPQL = " ORDER BY track.trackId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY train_Track.trackId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ms3.service.model.Track"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ms3.service.model.Track"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ms3.service.model.Track"),
            true);
    public static long TRACKID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ms3.service.model.Track"));
    private static ClassLoader _classLoader = Track.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Track.class };
    private long _trackId;
    private long _originalTrackId;
    private boolean _setOriginalTrackId;
    private String _title;
    private String _description;
    private String _courseList;
    private String _accreditation;
    private long _columnBitmask;
    private Track _escapedModel;

    public TrackModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Track toModel(TrackSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Track model = new TrackImpl();

        model.setTrackId(soapModel.getTrackId());
        model.setTitle(soapModel.getTitle());
        model.setDescription(soapModel.getDescription());
        model.setCourseList(soapModel.getCourseList());
        model.setAccreditation(soapModel.getAccreditation());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Track> toModels(TrackSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Track> models = new ArrayList<Track>(soapModels.length);

        for (TrackSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _trackId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setTrackId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _trackId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Track.class;
    }

    @Override
    public String getModelClassName() {
        return Track.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("trackId", getTrackId());
        attributes.put("title", getTitle());
        attributes.put("description", getDescription());
        attributes.put("courseList", getCourseList());
        attributes.put("accreditation", getAccreditation());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long trackId = (Long) attributes.get("trackId");

        if (trackId != null) {
            setTrackId(trackId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String courseList = (String) attributes.get("courseList");

        if (courseList != null) {
            setCourseList(courseList);
        }

        String accreditation = (String) attributes.get("accreditation");

        if (accreditation != null) {
            setAccreditation(accreditation);
        }
    }

    @JSON
    @Override
    public long getTrackId() {
        return _trackId;
    }

    @Override
    public void setTrackId(long trackId) {
        _columnBitmask |= TRACKID_COLUMN_BITMASK;

        if (!_setOriginalTrackId) {
            _setOriginalTrackId = true;

            _originalTrackId = _trackId;
        }

        _trackId = trackId;
    }

    public long getOriginalTrackId() {
        return _originalTrackId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getCourseList() {
        if (_courseList == null) {
            return StringPool.BLANK;
        } else {
            return _courseList;
        }
    }

    @Override
    public void setCourseList(String courseList) {
        _courseList = courseList;
    }

    @JSON
    @Override
    public String getAccreditation() {
        if (_accreditation == null) {
            return StringPool.BLANK;
        } else {
            return _accreditation;
        }
    }

    @Override
    public void setAccreditation(String accreditation) {
        _accreditation = accreditation;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Track.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Track toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Track) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TrackImpl trackImpl = new TrackImpl();

        trackImpl.setTrackId(getTrackId());
        trackImpl.setTitle(getTitle());
        trackImpl.setDescription(getDescription());
        trackImpl.setCourseList(getCourseList());
        trackImpl.setAccreditation(getAccreditation());

        trackImpl.resetOriginalValues();

        return trackImpl;
    }

    @Override
    public int compareTo(Track track) {
        long primaryKey = track.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Track)) {
            return false;
        }

        Track track = (Track) obj;

        long primaryKey = track.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        TrackModelImpl trackModelImpl = this;

        trackModelImpl._originalTrackId = trackModelImpl._trackId;

        trackModelImpl._setOriginalTrackId = false;

        trackModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Track> toCacheModel() {
        TrackCacheModel trackCacheModel = new TrackCacheModel();

        trackCacheModel.trackId = getTrackId();

        trackCacheModel.title = getTitle();

        String title = trackCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            trackCacheModel.title = null;
        }

        trackCacheModel.description = getDescription();

        String description = trackCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            trackCacheModel.description = null;
        }

        trackCacheModel.courseList = getCourseList();

        String courseList = trackCacheModel.courseList;

        if ((courseList != null) && (courseList.length() == 0)) {
            trackCacheModel.courseList = null;
        }

        trackCacheModel.accreditation = getAccreditation();

        String accreditation = trackCacheModel.accreditation;

        if ((accreditation != null) && (accreditation.length() == 0)) {
            trackCacheModel.accreditation = null;
        }

        return trackCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{trackId=");
        sb.append(getTrackId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", courseList=");
        sb.append(getCourseList());
        sb.append(", accreditation=");
        sb.append(getAccreditation());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("ms3.service.model.Track");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>trackId</column-name><column-value><![CDATA[");
        sb.append(getTrackId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>courseList</column-name><column-value><![CDATA[");
        sb.append(getCourseList());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accreditation</column-name><column-value><![CDATA[");
        sb.append(getAccreditation());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
