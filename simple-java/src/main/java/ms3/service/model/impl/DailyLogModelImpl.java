package ms3.service.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ms3.service.model.DailyLog;
import ms3.service.model.DailyLogModel;
import ms3.service.model.DailyLogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DailyLog service. Represents a row in the &quot;train_DailyLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ms3.service.model.DailyLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DailyLogImpl}.
 * </p>
 *
 * @author jackt
 * @see DailyLogImpl
 * @see ms3.service.model.DailyLog
 * @see ms3.service.model.DailyLogModel
 * @generated
 */
@JSON(strict = true)
public class DailyLogModelImpl extends BaseModelImpl<DailyLog>
    implements DailyLogModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a daily log model instance should use the {@link ms3.service.model.DailyLog} interface instead.
     */
    public static final String TABLE_NAME = "train_DailyLog";
    public static final Object[][] TABLE_COLUMNS = {
            { "dailyLogId", Types.BIGINT },
            { "assignment_id", Types.BIGINT },
            { "date_", Types.VARCHAR },
            { "accomplishments", Types.VARCHAR },
            { "roadblocks", Types.VARCHAR },
            { "plan", Types.VARCHAR },
            { "notes", Types.VARCHAR },
            { "hours", Types.DOUBLE },
            { "section", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table train_DailyLog (dailyLogId LONG not null primary key,assignment_id LONG,date_ VARCHAR(75) null,accomplishments VARCHAR(500) null,roadblocks VARCHAR(500) null,plan VARCHAR(500) null,notes VARCHAR(500) null,hours DOUBLE,section VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table train_DailyLog";
    public static final String ORDER_BY_JPQL = " ORDER BY dailyLog.dailyLogId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY train_DailyLog.dailyLogId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ms3.service.model.DailyLog"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ms3.service.model.DailyLog"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ms3.service.model.DailyLog"),
            true);
    public static long ASSIGNMENT_ID_COLUMN_BITMASK = 1L;
    public static long DAILYLOGID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ms3.service.model.DailyLog"));
    private static ClassLoader _classLoader = DailyLog.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            DailyLog.class
        };
    private long _dailyLogId;
    private long _originalDailyLogId;
    private boolean _setOriginalDailyLogId;
    private long _assignment_id;
    private long _originalAssignment_id;
    private boolean _setOriginalAssignment_id;
    private String _date;
    private String _accomplishments;
    private String _roadblocks;
    private String _plan;
    private String _notes;
    private double _hours;
    private String _section;
    private long _columnBitmask;
    private DailyLog _escapedModel;

    public DailyLogModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static DailyLog toModel(DailyLogSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        DailyLog model = new DailyLogImpl();

        model.setDailyLogId(soapModel.getDailyLogId());
        model.setAssignment_id(soapModel.getAssignment_id());
        model.setDate(soapModel.getDate());
        model.setAccomplishments(soapModel.getAccomplishments());
        model.setRoadblocks(soapModel.getRoadblocks());
        model.setPlan(soapModel.getPlan());
        model.setNotes(soapModel.getNotes());
        model.setHours(soapModel.getHours());
        model.setSection(soapModel.getSection());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<DailyLog> toModels(DailyLogSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<DailyLog> models = new ArrayList<DailyLog>(soapModels.length);

        for (DailyLogSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _dailyLogId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDailyLogId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _dailyLogId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return DailyLog.class;
    }

    @Override
    public String getModelClassName() {
        return DailyLog.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("dailyLogId", getDailyLogId());
        attributes.put("assignment_id", getAssignment_id());
        attributes.put("date", getDate());
        attributes.put("accomplishments", getAccomplishments());
        attributes.put("roadblocks", getRoadblocks());
        attributes.put("plan", getPlan());
        attributes.put("notes", getNotes());
        attributes.put("hours", getHours());
        attributes.put("section", getSection());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long dailyLogId = (Long) attributes.get("dailyLogId");

        if (dailyLogId != null) {
            setDailyLogId(dailyLogId);
        }

        Long assignment_id = (Long) attributes.get("assignment_id");

        if (assignment_id != null) {
            setAssignment_id(assignment_id);
        }

        String date = (String) attributes.get("date");

        if (date != null) {
            setDate(date);
        }

        String accomplishments = (String) attributes.get("accomplishments");

        if (accomplishments != null) {
            setAccomplishments(accomplishments);
        }

        String roadblocks = (String) attributes.get("roadblocks");

        if (roadblocks != null) {
            setRoadblocks(roadblocks);
        }

        String plan = (String) attributes.get("plan");

        if (plan != null) {
            setPlan(plan);
        }

        String notes = (String) attributes.get("notes");

        if (notes != null) {
            setNotes(notes);
        }

        Double hours = (Double) attributes.get("hours");

        if (hours != null) {
            setHours(hours);
        }

        String section = (String) attributes.get("section");

        if (section != null) {
            setSection(section);
        }
    }

    @JSON
    @Override
    public long getDailyLogId() {
        return _dailyLogId;
    }

    @Override
    public void setDailyLogId(long dailyLogId) {
        _columnBitmask |= DAILYLOGID_COLUMN_BITMASK;

        if (!_setOriginalDailyLogId) {
            _setOriginalDailyLogId = true;

            _originalDailyLogId = _dailyLogId;
        }

        _dailyLogId = dailyLogId;
    }

    public long getOriginalDailyLogId() {
        return _originalDailyLogId;
    }

    @JSON
    @Override
    public long getAssignment_id() {
        return _assignment_id;
    }

    @Override
    public void setAssignment_id(long assignment_id) {
        _columnBitmask |= ASSIGNMENT_ID_COLUMN_BITMASK;

        if (!_setOriginalAssignment_id) {
            _setOriginalAssignment_id = true;

            _originalAssignment_id = _assignment_id;
        }

        _assignment_id = assignment_id;
    }

    public long getOriginalAssignment_id() {
        return _originalAssignment_id;
    }

    @JSON
    @Override
    public String getDate() {
        if (_date == null) {
            return StringPool.BLANK;
        } else {
            return _date;
        }
    }

    @Override
    public void setDate(String date) {
        _date = date;
    }

    @JSON
    @Override
    public String getAccomplishments() {
        if (_accomplishments == null) {
            return StringPool.BLANK;
        } else {
            return _accomplishments;
        }
    }

    @Override
    public void setAccomplishments(String accomplishments) {
        _accomplishments = accomplishments;
    }

    @JSON
    @Override
    public String getRoadblocks() {
        if (_roadblocks == null) {
            return StringPool.BLANK;
        } else {
            return _roadblocks;
        }
    }

    @Override
    public void setRoadblocks(String roadblocks) {
        _roadblocks = roadblocks;
    }

    @JSON
    @Override
    public String getPlan() {
        if (_plan == null) {
            return StringPool.BLANK;
        } else {
            return _plan;
        }
    }

    @Override
    public void setPlan(String plan) {
        _plan = plan;
    }

    @JSON
    @Override
    public String getNotes() {
        if (_notes == null) {
            return StringPool.BLANK;
        } else {
            return _notes;
        }
    }

    @Override
    public void setNotes(String notes) {
        _notes = notes;
    }

    @JSON
    @Override
    public double getHours() {
        return _hours;
    }

    @Override
    public void setHours(double hours) {
        _hours = hours;
    }

    @JSON
    @Override
    public String getSection() {
        if (_section == null) {
            return StringPool.BLANK;
        } else {
            return _section;
        }
    }

    @Override
    public void setSection(String section) {
        _section = section;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            DailyLog.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public DailyLog toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (DailyLog) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DailyLogImpl dailyLogImpl = new DailyLogImpl();

        dailyLogImpl.setDailyLogId(getDailyLogId());
        dailyLogImpl.setAssignment_id(getAssignment_id());
        dailyLogImpl.setDate(getDate());
        dailyLogImpl.setAccomplishments(getAccomplishments());
        dailyLogImpl.setRoadblocks(getRoadblocks());
        dailyLogImpl.setPlan(getPlan());
        dailyLogImpl.setNotes(getNotes());
        dailyLogImpl.setHours(getHours());
        dailyLogImpl.setSection(getSection());

        dailyLogImpl.resetOriginalValues();

        return dailyLogImpl;
    }

    @Override
    public int compareTo(DailyLog dailyLog) {
        long primaryKey = dailyLog.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof DailyLog)) {
            return false;
        }

        DailyLog dailyLog = (DailyLog) obj;

        long primaryKey = dailyLog.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        DailyLogModelImpl dailyLogModelImpl = this;

        dailyLogModelImpl._originalDailyLogId = dailyLogModelImpl._dailyLogId;

        dailyLogModelImpl._setOriginalDailyLogId = false;

        dailyLogModelImpl._originalAssignment_id = dailyLogModelImpl._assignment_id;

        dailyLogModelImpl._setOriginalAssignment_id = false;

        dailyLogModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<DailyLog> toCacheModel() {
        DailyLogCacheModel dailyLogCacheModel = new DailyLogCacheModel();

        dailyLogCacheModel.dailyLogId = getDailyLogId();

        dailyLogCacheModel.assignment_id = getAssignment_id();

        dailyLogCacheModel.date = getDate();

        String date = dailyLogCacheModel.date;

        if ((date != null) && (date.length() == 0)) {
            dailyLogCacheModel.date = null;
        }

        dailyLogCacheModel.accomplishments = getAccomplishments();

        String accomplishments = dailyLogCacheModel.accomplishments;

        if ((accomplishments != null) && (accomplishments.length() == 0)) {
            dailyLogCacheModel.accomplishments = null;
        }

        dailyLogCacheModel.roadblocks = getRoadblocks();

        String roadblocks = dailyLogCacheModel.roadblocks;

        if ((roadblocks != null) && (roadblocks.length() == 0)) {
            dailyLogCacheModel.roadblocks = null;
        }

        dailyLogCacheModel.plan = getPlan();

        String plan = dailyLogCacheModel.plan;

        if ((plan != null) && (plan.length() == 0)) {
            dailyLogCacheModel.plan = null;
        }

        dailyLogCacheModel.notes = getNotes();

        String notes = dailyLogCacheModel.notes;

        if ((notes != null) && (notes.length() == 0)) {
            dailyLogCacheModel.notes = null;
        }

        dailyLogCacheModel.hours = getHours();

        dailyLogCacheModel.section = getSection();

        String section = dailyLogCacheModel.section;

        if ((section != null) && (section.length() == 0)) {
            dailyLogCacheModel.section = null;
        }

        return dailyLogCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{dailyLogId=");
        sb.append(getDailyLogId());
        sb.append(", assignment_id=");
        sb.append(getAssignment_id());
        sb.append(", date=");
        sb.append(getDate());
        sb.append(", accomplishments=");
        sb.append(getAccomplishments());
        sb.append(", roadblocks=");
        sb.append(getRoadblocks());
        sb.append(", plan=");
        sb.append(getPlan());
        sb.append(", notes=");
        sb.append(getNotes());
        sb.append(", hours=");
        sb.append(getHours());
        sb.append(", section=");
        sb.append(getSection());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("ms3.service.model.DailyLog");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>dailyLogId</column-name><column-value><![CDATA[");
        sb.append(getDailyLogId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>assignment_id</column-name><column-value><![CDATA[");
        sb.append(getAssignment_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>date</column-name><column-value><![CDATA[");
        sb.append(getDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accomplishments</column-name><column-value><![CDATA[");
        sb.append(getAccomplishments());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>roadblocks</column-name><column-value><![CDATA[");
        sb.append(getRoadblocks());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>plan</column-name><column-value><![CDATA[");
        sb.append(getPlan());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>notes</column-name><column-value><![CDATA[");
        sb.append(getNotes());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hours</column-name><column-value><![CDATA[");
        sb.append(getHours());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>section</column-name><column-value><![CDATA[");
        sb.append(getSection());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
